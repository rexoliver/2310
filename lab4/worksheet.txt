1. What is the address (in hexadecimal) of the first and last instruction in the loop?

First Instruction: 0x105c8
Last Instruction: 0x105f4

2. Is the loop of the "while(condition)-do", "repeat-until(condition)", or "do-while(condition)" form?

do-while form

3. Do the values of 'x' increase or decrease?

increase

4. In the form of "b *ADDRESS", what is the command to set a breakpoint on the line where you can observe the new value of 'y' after it is calcualted? Actually use "print $r0" to check and make sure the register you think is 'y' has been updated and has the correct value.

0x105dc

5. What two gdb commands can you enter so that at each and every step, gdb will print both the decimal and hexadecimal form of the value 'y'?

print/d $r3
print/x $r3

-- check this with TA's

6. The loop as written only calculates the value of 'y' for the values of 'x' between 0 and 9. It should calculate the value of 'y' for all values of 'x' between 0 and 10. Why does the loop stop at 9 and what change would fix it?

It stops at 9 because the blt statement at line 41 means only <, not less than equal, so it stops 1 shorter go-through of the loop than it needs to. This could be fixed by replacing the blt with a ble.


7. Correct the code in "loop.s", assemble and step through the program again in gdb. Fill in the following table:

register        register                register
   x               y                       y
(counter)       (decimal)               (hexadecimal)

   0            ____7_____              ___0X7____

   1            ____-1____              0xffffffff

   2            ____-9____              0xfffffff7

   3            ____-17____             0xffffffef

   4            ____-25___              0xffffffe7

   5            ____-33____             0xffffffdf

   6            ____-41___              0xffffffd7

   7            _____-49___             0xffffffcf

   8            _____-57__              0xffffffc7

   9            ____-65____             0xffffffbf

  10            ____-73___              0xffffffb7
  

=====================
 Octal Dump Questions
=====================

8. What type of data is in the source file?

   The source file is made of all human readable characters.

9. What type of data is in the executable?

The executable file, on the other hand, cannot be read by humans easily

BONUS:

10. Use the directory list command (ls -l) to determine the size of your source file (loop.s) and the executable (loop). How do the files compare in size? Which is bigger? In order to get any credit you must also explain why it is bigger.

The file loop is 579844 bytes, while the file loop.s is 1008 bytes, so the loop executable is larger. The reason why the executable is larger is because it actually includes libraries and things needed so the program can run. 

